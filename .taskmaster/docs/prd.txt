# PRD: Voice-to-Text Clipboard App (Whisper Mate)

## Overview

**Problem:** 음성을 텍스트로 빠르게 변환하여 다양한 애플리케이션에서 활용하고 싶지만, 기존 솔루션들은 복잡하거나 워크플로우 통합이 어렵습니다.

**Solution:** 음성을 텍스트로 자동 변환하여 클립보드에 즉시 복사하는 웹 기반 애플리케이션. OpenAI Whisper API를 활용한 고품질 음성 인식과 직관적인 UI로 어디서든 음성만으로 텍스트를 생성할 수 있습니다.

**Target Users:** 콘텐츠 크리에이터, 개발자, 비즈니스 전문가, 접근성이 필요한 사용자

**Value:** 즉시 사용 가능한 클립보드 통합, 이력 관리, 고품질 인식, 웹/데스크톱 지원

---

## Core Features

**1. 음성 녹음 및 변환**
- 마이크 버튼 클릭으로 녹음 시작/중지
- OpenAI Whisper API로 텍스트 변환
- 자동 클립보드 복사 및 실시간 상태 표시

**2. 텍스트 확인 및 편집**
- 변환 결과 즉시 표시 및 인라인 편집
- 수정된 텍스트 재복사 가능

**3. 변환 이력 관리**
- Supabase에 모든 변환 기록 자동 저장
- 시간순 정렬, 검색, 복사, 삭제 기능

**4. 에러 추적**
- Sentry를 통한 실시간 에러 모니터링 및 알림

---

## Technical Architecture

**Stack:** React, Vite, TypeScript, Electron (desktop phase)  
**UI:** Shadcn/ui components, Tailwind CSS  
**Backend:** Supabase (PostgreSQL + REST API)  
**STT:** OpenAI Whisper API  
**Testing:** Playwright E2E tests  
**Monitoring:** Sentry

**Data Model (Supabase):**
```typescript
interface Transcription {
  id: string;
  created_at: timestamp;
  text: string;
  audio_duration: number;
  language: string;
}
```

**Key Integrations:**
- Whisper API: `POST /v1/audio/transcriptions`
- Clipboard API: `navigator.clipboard.writeText()`
- Supabase: Auto-generated REST endpoints

---

## Development Roadmap

### Phase 1: 초기 환경 구축
**목표:** 프로젝트 기본 인프라 및 설정 완료

**환경 설정:**
- 프로젝트 구조 및 폴더 구조 설계
- 필요한 의존성 패키지 설치 (React, Vite, TypeScript)
- TypeScript 설정 및 타입 정의 파일 준비
- ESLint, Prettier 등 개발 도구 설정
- 환경 변수 관리 설정 (.env 파일)
- Git 저장소 설정 및 초기 커밋

**개발 환경:**
- Vite 개발 서버 설정
- Hot Module Replacement (HMR) 설정
- 빌드 스크립트 설정
- 환경별 설정 분리 (dev, production)

**기초 구성:**
- 프로젝트 루트 컴포넌트 구조
- 라우팅 설정 (필요시)
- 전역 스타일 및 테마 설정
- 유틸리티 함수 구조화

---

### Phase 2: UI/UX 구현
**목표:** 사용자 인터페이스 및 사용자 경험 설계 및 구현

**디자인 시스템:**
- Shadcn/ui 컴포넌트 설치 및 설정
- Tailwind CSS 설정 및 커스텀 테마
- 컴포넌트 라이브러리 통합
- 반응형 디자인 기준 설정

**메인 UI 컴포넌트:**
- 메인 레이아웃 컴포넌트
- 녹음 버튼 UI (마이크 아이콘, 상태 표시)
- 텍스트 표시 영역 (결과 창, 편집 가능 영역)
- 이력 목록 UI (카드/리스트 형태)
- 로딩 인디케이터 및 상태 메시지

**사용자 피드백:**
- 토스트 알림 시스템
- 오디오 웨이브폼 비주얼라이제이션
- 녹음 상태 시각적 피드백
- 에러 메시지 표시 UI

**접근성:**
- 키보드 네비게이션 지원
- ARIA 라벨 및 역할 설정
- 색상 대비 검증
- 스크린 리더 지원

---

### Phase 3: 내부 기능 구현
**목표:** 핵심 비즈니스 로직 및 API 통합 구현

**오디오 처리:**
- Web Audio API를 이용한 마이크 녹음 구현
- 오디오 포맷 변환 (WAV, MP3 등)
- 오디오 크기 최적화 및 압축
- 녹음 시간 제한 및 관리

**Whisper API 통합:**
- OpenAI Whisper API 클라이언트 구현
- API 키 관리 및 보안 처리
- 오디오 파일 업로드 및 변환 요청
- 응답 처리 및 에러 핸들링
- API 재시도 로직 구현

**클립보드 통합:**
- Clipboard API를 통한 자동 복사 기능
- 복사 성공/실패 핸들링
- 수동 복사 버튼 폴백 옵션
- 복사 상태 피드백

**Supabase 통합:**
- Supabase 프로젝트 설정
- 데이터베이스 스키마 설계 및 마이그레이션
- 변환 이력 저장 로직
- 이력 조회 API 구현
- 검색 기능 구현
- 이력 삭제 기능

**텍스트 편집:**
- 인라인 편집 기능 구현
- 수정된 텍스트 저장 로직
- 텍스트 포맷팅 옵션 (선택사항)

**에러 처리:**
- Sentry 통합 및 에러 캡처
- 에러 바운더리 구현
- 사용자 친화적 에러 메시지
- 로그 시스템

---

### Phase 4: 테스트
**목표:** 앱의 안정성 및 품질 보증

**E2E 테스트:**
- Playwright 설치 및 설정
- 주요 사용자 플로우 테스트 케이스 작성
  - 녹음 → 변환 → 복사 플로우
  - 이력 저장 및 조회 플로우
  - 검색 및 편집 플로우
- 다양한 브라우저 테스트 (Chrome, Firefox, Safari)
- 반응형 디자인 테스트

**단위 테스트:**
- 유틸리티 함수 테스트
- 컴포넌트 렌더링 테스트
- API 호출 모킹 및 테스트

**통합 테스트:**
- API 통합 테스트
- 데이터베이스 연동 테스트
- 에러 핸들링 시나리오 테스트

**성능 테스트:**
- 변환 속도 측정
- 메모리 사용량 모니터링
- 대용량 데이터 처리 테스트

**접근성 테스트:**
- 키보드 네비게이션 테스트
- 스크린 리더 호환성 테스트
- 컬러 대비 검증

---

### Phase 5: 데스크탑 앱 빌드
**목표:** 웹 앱을 데스크탑 애플리케이션으로 패키징

**Electron 통합:**
- Electron 설치 및 프로젝트 설정
- 메인 프로세스 및 렌더러 프로세스 설정
- 웹 앱을 Electron 윈도우로 통합

**네이티브 기능:**
- 시스템 트레이 아이콘 구현
- 글로벌 키보드 단축키 설정
- 데스크톱 알림 구현
- 파일 시스템 접근 권한 처리

**빌드 설정:**
- Electron Builder 설정
- Windows용 설치 파일 생성 (.exe, .msi)
- macOS용 설치 파일 생성 (.dmg, .pkg)
- 코드 서명 설정 (선택사항)

**배포 준비:**
- 업데이트 시스템 설정 (auto-updater)
- 릴리즈 노트 자동 생성
- 배포 파이프라인 설정

---

## Logical Dependency Chain

**1. 초기 환경 구축 (Foundation)**
- 프로젝트 셋업 → 개발 환경 구성 → 기초 구조
- **목적:** 모든 개발의 기반이 되는 인프라 구축

**2. UI/UX 구현 (Visual Layer)**
- 디자인 시스템 → 컴포넌트 개발 → 사용자 피드백 UI
- **목적:** 사용자가 상호작용할 시각적 인터페이스 제공

**3. 내부 기능 구현 (Core Logic)**
- 오디오 처리 → API 통합 → 데이터 관리 → 에러 처리
- **목적:** 앱의 핵심 기능 구현으로 실제 가치 제공

**4. 테스트 (Quality Assurance)**
- E2E 테스트 → 단위/통합 테스트 → 성능/접근성 테스트
- **목적:** 안정성 및 품질 보증

**5. 데스크탑 앱 빌드 (Platform Expansion)**
- Electron 통합 → 네이티브 기능 → 빌드/배포
- **목적:** 웹 앱을 데스크톱 애플리케이션으로 확장

---

## Risks and Mitigations

**Technical Risks:**
- **Whisper API 지연/실패:** 재시도 로직, 명확한 에러 메시지, rate limit 모니터링
- **클립보드 호환성:** 폴백으로 수동 복사 버튼, Electron에서 Node.js API 사용
- **대용량 오디오:** 녹음 시간 제한(5분), 오디오 압축
- **Supabase 연결 실패:** 로컬 캐싱(IndexedDB), 재연결 시 동기화

**MVP 스코프 크리핑 방지:**
- **엄격한 MVP 정의:** Phase 1-3 핵심 기능 우선 구현
- 추가 기능은 사용자 피드백 기반 우선순위 조정
- "Launch first, iterate fast" 원칙

**Resource Constraints:**
- MCP 도구로 개발 속도 향상 (Shadcn, Supabase, Playwright MCP)
- API 비용: 초기 테스트는 개발자 키, 향후 사용자 자체 키 옵션
- 서버리스 함수로 API 키 프록시 (보안)

---

## Success Criteria

**MVP (Phase 1-3):**
- ✅ 프로젝트 환경 구축 완료
- ✅ UI/UX 구현 완료
- ✅ 음성 녹음 및 텍스트 변환
- ✅ 클립보드 자동 복사
- ✅ 이력 저장 및 조회
- ✅ 기본 에러 처리

**Launch Ready (Phase 4-5):**
- ✅ 테스트 커버리지 > 80%
- ✅ 웹 앱 배포 (Vercel/Netlify)
- ✅ 데스크톱 앱 설치 파일 (Windows, macOS)
- ✅ Sentry 에러 추적 활성화

**Performance Targets:**
- 음성 변환: < 5초 (30초 오디오)
- 클립보드 복사: < 100ms
- 앱 시작: < 2초